/**
 * Created by Egor on 12.11.2016.
 */
import org.jetbrains.annotations.Contract;

import java.io.*;
import java.util.*;
import java.io.FileOutputStream;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.charts.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.xssf.usermodel.charts.*;

public class Laba2 {
    static double max(double data[][], int i) {
        double max = data[0][0];

        for (int j = 0; j < 130; j++)
            if (data[j][i] > max) max = data[j][i];

        return max;
    }



    public static void main(String[] args) {
        double buffer;
        FileWriter fileWriter,fileWriter_test;
        String string, s[];
        String substring;
        double max;
     /*   XSSFWorkbook my_workbook = new XSSFWorkbook();

        XSSFSheet my_worksheet = my_workbook.createSheet("LineChart");*/
        Perceptrone_model perceptrone_model=new Perceptrone_model(3,5,5,1);

        double data_train[]=new double [200];
        double data_test[]=new double [50];
        double data_all[][]=new double[250][2];

        int l=0;
        try {
            Scanner scanner = new Scanner(new File("Данные для прогноза.txt"));
            Scanner Scanner_train = new Scanner(new File("Data for neural network.txt"));
            while (Scanner_train.hasNextLine()) {
                string = Scanner_train.nextLine();
                s = string.split("\\ ");
                for (int i = 0; i < s.length; i++) {
                    buffer = Double.parseDouble(s[i]);
                    if (l<200)
                    data_train[l]=buffer;
                    else {
                          data_test[l - 200] = buffer;
                    }
                    l++;
                }
            }
            l=0;
            System.out.println(data_test[0]);

            int k=0;
            while (scanner.hasNextLine()) {
                string = scanner.nextLine();
                s = string.split("\\,");
                for (int i = 0; i < s.length; i++) {
                    if ((i==2)||(i==3)) {
                        buffer = Double.parseDouble(s[i]);
                        data_all[k][l] = buffer;
                    }
                }
                k++;
                l=0;
            }

            double dif_data[]=new double[250];
            for (int i=0;i<k;i++)
                dif_data[i]=data_all[i][0]-data_all[i][1];

            double square_sums=0;
            for (int i=0;i<k;i++)
                square_sums+=dif_data[i]*dif_data[i];
            square_sums=Math.sqrt(square_sums);

            l=0;





            perceptrone_model.prognos_train(data_train,data_test);
            double estimates[];
            estimates=perceptrone_model.get_estimates(data_train,data_test);

          for (int i=0;i<estimates.length;i++)
                System.out.println("Прогнозируемые данные: "+ estimates[i]*square_sums + " Реальные данные: "+data_train[i]*square_sums);
            Scanner_train.close();

          /*  XSSFWorkbook my_workbook = new XSSFWorkbook();
            XSSFSheet my_worksheet = my_workbook.createSheet("Datatypes in Java");

            int colindex;
            for (int k=0;k<3;k++) {
                colindex=0;
                XSSFRow my_row = my_worksheet.createRow((short) k);

                for (int i = 0; i < 25; i++) {
                    if (k==0){
                        XSSFCell cell = my_row.createCell((short) colindex);
                        cell.setCellValue(i);
                        colindex++;
                    }
                    if (k==1) {
                        XSSFCell cell = my_row.createCell((short) colindex);
                        cell.setCellValue(estimates[i]);
                        colindex++;
                    }
                    if (k==2) {
                        XSSFCell cell = my_row.createCell((short) colindex);
                        cell.setCellValue(data_true_values[i+1]);
                        colindex++;
                    }
                }
            }

            try (FileOutputStream fileout = new FileOutputStream("xlsx-line.xlsx")) {
                my_workbook.write(fileout);
            } catch (IOException ex) {
                System.out.println(ex.getMessage());

            }*/


        } catch (IOException e) {
            e.printStackTrace();
        }

        /* try (FileOutputStream fileout = new FileOutputStream("xlsx-line-chart.xlsx")) {
             my_workbook.write(fileout);
        } catch (IOException ex) {
            System.out.println(ex.getMessage());

        }*/
    }
}
